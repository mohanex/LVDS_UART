/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "PmodGPIO.h"
#include "xspi.h"
#include "xuartlite_l.h"
#include "xbram.h"
#include "xclk_wiz.h"
#include "xil_io.h"
#include "xil_cache.h"
#include "sleep.h"

#define BYTE1				0 /* Byte 1 position */
#define BYTE2				1 /* Byte 2 position */
#define BYTE3				2 /* Byte 3 position */
#define BYTE4				3 /* Byte 4 position */
#define BYTE5				4 /* Byte 5 position */

#define GPIO_REG_Input		0xFF
#define GPIO_REG_DATA		0x00
#define GPIO_CHANNEL        2
#define GPIO_INTERRUPT_PIN  1
#define SPI_SELECT		    1
#define PAGE_SIZE		    256
#define READ_WRITE_EXTRA_BYTES 4

#define UART_DEVICE_ID     XPAR_AXI_UARTLITE_0_DEVICE_ID
#define QSPI_DEVICE_ID	   XPAR_SPI_0_DEVICE_ID
#define GPIO_DEVICE_ID     XPAR_PMODGPIO_0_DEVICE_ID

#define BRAM_MATRIX_BASEADDR       0x000F4240
#define QSPI_MATRIX_BASEADDR_BEGIN 0x00F00000
#define UART_BASEADDR              XPAR_AXI_UARTLITE_0_BASEADDR
#define QSPI_BASEADDR              XPAR_AXI_QUAD_SPI_0_BASEADDR

#define QSPI_FLASH_SIZE            65536  // Size of QSPI flash in bytes (64KB)
#define BUFFER_SIZE                32      // Buffer size for reading data
//#define BRAM_SIZE                  1048576     // Size of BRAM in bytes (1MB)


//u8 bram_buffer[BRAM_SIZE];

//IPs Instantiations
PmodGPIO GPIO_input;

//XSpi_Stats QSPI_stats;
static XSpi QSPI;

u8 ReadID[PAGE_SIZE + READ_WRITE_EXTRA_BYTES];
u8 WriteID[PAGE_SIZE + READ_WRITE_EXTRA_BYTES];

u8 qspi_read_buffer[PAGE_SIZE + READ_WRITE_EXTRA_BYTES];
u8 qspi_write_buffer[PAGE_SIZE + READ_WRITE_EXTRA_BYTES];
/*
 * Buffer used during Read transactions.
 */

u8 FlashID[3];


/*
 *
XUartLite_Config *UART_config;
XUartLite_Buffer *UART_Buffer;
XUartLite_Stats *UART_Stats;
XUartLite *UART;
*/
XBram XBRAM;
XBram_Config XBRAM_config;

XClk_Wiz *CLK_wiz;
XClk_Wiz_Config *CLK_wiz_config;

/*prototypes
 *
 
void save_to_BRAM(u32 bytes_read, u32 offset, u8 buffer_read);*/
void QSPI_read_fun(u32 start_address, u32 size);
int initialize_qspi_fun();
int FlashReadID(void);
//int initialize_uart_fun();
int initialize_gpio_fun();
//int initialize_bram_fun();

int main()
{   
int status_valide;
	init_platform();

	status_valide = initialize_qspi_fun();
	if(status_valide != XST_SUCCESS){
		xil_printf("qspi initialize failed\r\n");
	}

	status_valide = initialize_gpio_fun();
	if(status_valide != XST_SUCCESS){
		xil_printf("gpio initialize failed\r\n");
	}

    xil_printf("QSPI Flash Read operation from %lu\r\n", (unsigned long)QSPI_MATRIX_BASEADDR_BEGIN);

    u32 start_address = QSPI_MATRIX_BASEADDR_BEGIN;  // l'adresse oÃƒÂ¹ dÃƒÂ©bute les matrixes dans la qspi
    u32 read_size = 25600;       // nombre de bits ÃƒÂ  lire 25ko sans csr

    xil_printf("Writing DATA to BRAM at %lu \r\n", (unsigned long)BRAM_MATRIX_BASEADDR);
    QSPI_read_fun(start_address, read_size);


    while (1) {
        // Check if GPIO interrupt occurred
        if (GPIO_getPin(&GPIO_input, GPIO_CHANNEL)){
            // Send data stored in Block RAM over UART
            for (u32 i = 0; i < read_size; i++) {
                u8 data = *((volatile u8*)(start_address + i));
                XUartLite_SendByte(UART_BASEADDR, data);
            }
            break;
        }
    }

    xil_printf("Data sent over UART \r\n");


    while(1){
        usleep_MB(1000000);
        xil_printf("1s attente \r\n");
    }

    cleanup_platform();
    return 0;
}


/*
* All
* The
* Functions
*/
int initialize_qspi_fun() {
    int status;
    //XSpi_Config *conf;
    //conf = XSpi_LookupConfig(QSPI_DEVICE_ID);


    status = XSpi_Initialize(&QSPI, QSPI_DEVICE_ID);
    if (status != XST_SUCCESS) {
        return XST_FAILURE;
    }

    status = XSpi_SetOptions(&QSPI, XSP_MASTER_OPTION | XSP_MANUAL_SSELECT_OPTION);
	if(status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	status = XSpi_SetSlaveSelect(&QSPI, SPI_SELECT);
	if(status != XST_SUCCESS) {
		return XST_FAILURE;
	}

    status = XSpi_Start(&QSPI);
    if (status != XST_SUCCESS) {
        return XST_FAILURE;
    }

    XSpi_IntrGlobalDisable(&QSPI);

    status = FlashReadID( );
	if(status != XST_SUCCESS) {
		return XST_FAILURE;
	}

    return XST_SUCCESS;
}



int initialize_gpio_fun() {
    GPIO_begin(&GPIO_input, GPIO_DEVICE_ID, GPIO_REG_Input);
    return XST_SUCCESS;
}

void QSPI_read_fun(u32 start_address, u32 size) {
    u32 bytes_read = 0;
    u32 bytes_to_read;
    size_t memcpy_size;


    int status;

    while (bytes_read < size) {
        bytes_to_read = size - bytes_read;
        if (bytes_to_read > PAGE_SIZE) {
            bytes_to_read = PAGE_SIZE;
        }
        status = XSpi_Transfer(&QSPI, qspi_write_buffer, qspi_read_buffer, (unsigned int)bytes_to_read);
        if (status == XST_FAILURE) {
            xil_printf("QSPI read failed!\r\n");
            break;
        }
        memcpy_size = sizeof(qspi_read_buffer);
        memcpy((void*)((char*)BRAM_MATRIX_BASEADDR + bytes_read), qspi_read_buffer, memcpy_size);
        /*
        for (u32 i = 0; i < bytes_to_read; i++) {
            Xil_Out8(BRAM_MATRIX_BASEADDR + bytes_read + i,qspi_read_buffer[i]);
            memcpy(BRAM_MATRIX_BASEADDR + i + bytes_read, qspi_read_buffer, bytes_to_read);
        }
        */
        bytes_read += bytes_to_read;
    }
}

int FlashReadID(void)
{
	int Status;
	int i;

	/* Read ID in Auto mode.*/
	WriteID[BYTE1] = 0x9f;
	WriteID[BYTE2] = 0xff;		/* 4 dummy bytes */
	WriteID[BYTE3] = 0xff;
	WriteID[BYTE4] = 0xff;
	WriteID[BYTE5] = 0xff;

	Status = XSpi_Transfer(&QSPI, WriteID, ReadID, 5);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	for(i = 0; i < 3; i++)
		FlashID[i] = ReadID[i + 1];

	xil_printf("FlashID=0x%x 0x%x 0x%x\n\r", ReadID[1], ReadID[2],
				ReadID[3]);
	return XST_SUCCESS;
}
